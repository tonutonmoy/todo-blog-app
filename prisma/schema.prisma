// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id        String       @id @default(auto()) @map("_id") @db.ObjectId
//   firstName String
//   lastName  String
//   email     String       @unique
//   password  String
//   role      UserRoleEnum @default(USER)
//   status    UserStatus   @default(ACTIVE)

//   otp       String?
//   otpExpiry DateTime?

//   isEmailVerified               Boolean   @default(true)
//   emailVerificationToken        String?
//   emailVerificationTokenExpires DateTime?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//     todos     Todo[]

//   @@map("users")
// }
// model Todo {
//   id        String       @id @default(auto()) @map("_id") @db.ObjectId
//   title     String
//   description  String
 



//   isShowing              Boolean   @default(false)
  

//   userId      String   @db.ObjectId
//   user        User     @relation(fields: [userId], references: [id])
//   @@map("todos")
// }




// enum UserRoleEnum {
//   USER
//   SUPERADMIN
// }

// enum ProductStatus {
//   ACTIVE
//   INACTIVE
// }

// enum UserStatus {
//   ACTIVE
//   INACTIVE
//   BLOCKED
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String       @unique
  password  String
  role      UserRoleEnum @default(USER)
  status    UserStatus   @default(ACTIVE)

  otp       String?
  otpExpiry DateTime?

  isEmailVerified               Boolean   @default(true)
  emailVerificationToken        String?
  emailVerificationTokenExpires DateTime?

  blogs     Blog[]
  comments  Comment[]
  likes     Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Blog {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  authorId  String     @db.ObjectId
  author    User       @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     Like[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("blogs")
}

model Comment {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  blogId    String     @db.ObjectId
  blog      Blog       @relation(fields: [blogId], references: [id])
  userId    String     @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())

  @@map("comments")
}

model Like {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  blogId  String   @db.ObjectId
  blog    Blog     @relation(fields: [blogId], references: [id])
  userId  String   @db.ObjectId
  user    User     @relation(fields: [userId], references: [id])

  @@unique([blogId, userId])
  @@map("likes")
}

enum UserRoleEnum {
  USER
  SUPERADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}
